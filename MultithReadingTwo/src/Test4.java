public class Test4 {

    //synchronized 用法。是同步的意思
    //不同的上下文当中，有不同的含义。
    // 比如：多线程中，线程安全中，同步 指的是“互斥”，一个进行的时候，另外一个就不能进行了。
    // 比如：在 IO 或者 网络编程 中，同步 相对的词叫做“异步” 此处的同步和互斥没有任何关系，
    //  和线程也没有关系，表示的是消息的发送方如何获取到结果

    //synchronized 的使用方式：
    // 1、直接修饰普通方法。 本质是对某个对象进行加锁。在 Java 当中，每个类都是继承自 Object
    //  每个 new 出来的实例，里面一方面包含了自己安排的属性，一方面包含了“对象头”，对象的一些元数据。
        //这里就是：进入对象加锁，离开之后解锁
        //synchronized public void increase() {
            //count++;
        //}

    // 2、修饰一个代码块。可以显示指定针对哪个对象加锁（Java 中的任意对象都可以作为锁的对象）
    //  随手拿个对象都能作为 锁对象 的用法
            //public void increase() {
                //这里就是针对 this 加锁
                //synchronized (this) {
                    //count++;
                //}
            //}


    //3、修饰一个静态方法。所谓的”静态方法“，更严谨的叫法应该叫作类方法，普通的方法应该叫作”实例方法“
    // 加锁的时候，是给当前方法所在的类加锁。相当于针对当前类的类对象加锁。也就是反射。

    //4、监视器锁：monitor lock

    //synchronized 最原始的意义
    //1、互斥
    //2、刷新内存
    //3、可重入：同一个线程针对同一个锁，连续加锁两次。如果出现了死锁，就是不可重入。如果不会死锁，就是可重入。
}
