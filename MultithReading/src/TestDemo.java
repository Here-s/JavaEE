class MyThread extends Thread {
    //run 方法里面描述了线程内部要执行哪些代码，
    //  每个线程都是并发执行的（各自执行各自的代码，就是告诉线程，要执行的代码是什么）
    //并不是一定义这个类，一写 run 方法，线程就创建出来，相当于有活了，但是还没干。
    //  调用 new 的对象的 start 方法，才是真正的创建了线程。
    //这里创建的线程，都是同一个进程内部创建的。
    //线程之间是并发执行的
    @Override
    public void run() {
        System.out.println("hello thread");
    }
}

public class TestDemo {


    //最基本的创建线程的办法
    public static void main(String[] args) {
        Thread t = new MyThread();
        t.start();
    }
    //Thread 类的基本用法，通过 Thread 类创建线程，写法有很多种，
    //  最简单的做法：创建子类，继承自 Thread 并且重写 run 方法

    //Thread 类的其他方法：Thread(String name) 起一个名字，方便调试。

    //多线程能提高完成任务的效率。两个整数，分别自增十万次，


    //多线程
    // 线程：因为系统支持多任务了。所以就需要并发编程
    // 通过多线程，是完全可以实现并发编程的，但是有个问题：
    //  如果要频繁的创建/销毁进程，就需要分配内存，打开文件，就需要释放资源，释放内存。做事的成本较高
    //      成本高主要是因为资源的 创建 和 释放 并不是高效的，所以成本较高。
    //  解决 创建 和 销毁 这样的问题，方法有两个：
    //  1、进程池（数据库连接池，字符串常量池）
    //      进程池可以解决问题，提高效率。但是也有问题，池里的限制进程，不使用的时候也在消耗系统资源，
    //      消耗的系统资源太多了。
    //  2、使用线程来实现并发编程
    //      线程比进程更轻量，每个进程可以执行一个任务，每个进程也能执行一个任务（执行一段代码），也能够并发编程
    //      创建线程的成本比创建进程要低很多，销毁线程的成本也比销毁进程低很多，调度线程的成本也比调度进程低很多。
    //在 Linux 上也把线程称为 轻量级进程（LWP）
    //为啥线程比进程更轻量，进程重量重在资源的申请释放。线程是包含在进程当中的，一个进程中的多个线程共用同一份资源
    //  只是创建第一个进程的时候（由于要分配资源），成本是相对高的，后续在这个进程中再创建其他线程，
    //  这个时候成本都是要更低一些，就不必再分配资源了。
    //如果线程多了，这些线程可能要竞争同一个资源，这个时候，整体的速度就受到了限制，因为整体硬件资源是有限的。

    //  如果要频繁的调度进程，事情的成本也高

    //经典面试题：谈谈线程和进程的区别和联系：
    //  1、进程包含线程：一个进程里可以有一个线程，也可以有多个线程。
    //  2、进程和线程都是为了处理并发编程这样的场景。但是进程有问题，频繁的创建和释放的时候效率很低，相比之下，
    //      线程更轻量，创建和释放的效率更高（为啥更轻量？少了申请和释放的过程）
    //  3、操作系统创建进程，要给进程分配资源，进程是操作系统调度执行的基本单位。操作系统创建的线程，
    //      是要在 CPU 上调度执行，线程是操作系统调度执行的基本单位。
    //  4、进程具有独立性，每个进程有各自的虚拟地址空间，一个进程挂了，不会影响到其它进程。同一个进程中的多个线程，
    //      公用同一个内存空间，一个线程挂了，可能影响到其他线程，甚至导致程序崩溃。

    //并发编程方式；Java 中还是用多线程更多，其他语言主要的并发编程又不一样，go 语言是通过多协程来实现
    //  erlang 是通过 actor 模型实现并发， js 是通过定时器 + 实际回调的方式实现并发

    //进程包含线程：
    // 1、一个进程里面可以有一个线程，也可以有多个线程
    // 2、进程线程都可以解决并发编程问题场景，但是进程在频繁创建和销毁中，开销更高，线程开学更低（线程比进程更轻量）
    // 3、进程是系统分配资源（内存，文件资源。。。。）基本单位，线程是系统调度执行的基本单位（CPU）
    // 4、进程之间是相互独立的，各自有各自的虚拟地址空间，同一个经常内部的多个线程之间，共用同一个内存空间及文件资源，
    //  一个进程挂了，其它进程一般没事。但是一个线程挂了，很可能把整个进程都带走。


    //Java 进行多线程编程：Java 提供了一个 Thread 类，来表示/操作线程。Thread 类也可以视为是 Java 标准库提供的 API
    //创建好的 Thread 实例，其实和操作系统中的线程是 一一对应 的关系。操作系统提供了一组关于线程的 API 不过是 C/C++ 写的
    //  java 进一步封装，就成了 Thread 类










}
