public class Test3 {

    //传输层：
    //UDP：报文长度是 2 个字节，一个 UDP 报文最多是 65535 =》 64k
    //    通过校验和可以判断是否正确

    //TCP：是一个非常非常重要的协议，不光在实际开发中广泛使用，而且也是面试常考的。
    // 有连接，可靠传输，面向字节流，全双工。
    //可靠传输：是 TCP 的核心机制。引入 TCP 的关键原因，就是为了保证可靠传输
    // 实现可靠传输的核心：
    // 1、确认应答：就是发出去之后，对方收到了。但是消息可能会乱序
    // 避免出现乱序，就可以根据编号机制来解决，根据编号就可以知道消息是第几条了。
    // 就是根据编号来确定当前的 应答报文 是针对哪个消息进行的确认应答
    // TCP 的针对消息的序号，还有说法，
    // 2、超时重传：相当于对确认应答进行了补充，确认应答是网络一切正常的时候，通过 ACK 通知发送方收到了
    // 如果出现了丢包的情况，超时重传机制就要起到效果了。如果网络不是有太大问题，一般重传都是可以成功的。
    //  可能是发丢了，对方直接没收到。也可能是 对方收到消息了，但是 ACK 丢了。
    //  如果是 ACK 丢了，此时触发了超时重传，就会导致接收方收到了重复的消息，这样的话，
    //  TCP 内部会有一个去重操作，接收方收到的数据会先放在操作系统的 接收缓冲区 当中的，
    //  收到新的数据，TCP 就会去 接收缓冲区 当中检查有没有这个消息，如果有，就丢弃，没有的话，就放到缓冲区
    //  用来保证程序调用 socket API 拿到的这个数据一定是不可重复的。
    //  重传如果失败，还会继续尝试，也不会无休止的重传，连续几次失败的话，就认为是网络遇到了严重的情况，
    //  再怎么重传也可能不行，就只能放弃（自动断开与 TCP 的连接）重传的时间间隔会逐渐变大。

    //基于上面两个协议，TCP 的可靠性，就得到了有效的保障
    // 3、连接管理，也是 TCP 保证可靠性的一个机制（经典面试题）网络部分最高频的面试题
    //  1）如何建立连接（三次握手）客户端和服务器之间，通过三次交互，完成了建立连接的过程
    //   如果 ACK 是 1 ，表示这个报文就是一个”确认报文段“  如果 SYN 这一位是 1 表示当前报文就是一个
    //   同步报文段，主机 A 和 主机 B 之间要建立连接。
    //   三次握手，相当于是”投石问路“，检查一下当前这个网络的情况是否满足可靠传输的基本条件
    //   让双方能够协商一些必要的信息。
    // 经典面试题：
    //  1、描述 TCP 三次握手的过程：针对这个问题，一定不要用嘴说，一定一定要画图
    //   如果是线下面试，一定一定要带上纸和笔
    //   为啥是三次：因为四次的话，分开传输会降低效率，
    // 2）如何断开连接（四次挥手）：三次握手，就让客户端和服务器之间建立好了连接，其实在建立好连接之后
    //  操作系统内核当中，就需要使用一定的数据结构来保存连接的相关的信息，保存的信息其实最重要的就是前面说的五元组
    //  有一天，连接断开了，那么五元组保存的连接信息就没意义了，对应的空间就可以释放了。
    //  双方各自向对方发送了 FIN（结束报文段）请求，并且各自给对方一个 ACK 确认报文。
    //  三次握手，一定是客户端主动发起的（主动发起的一方才叫客户端）
    //  四次挥手，可能是客户端主动发起，也可能是 服务器 主动发起的
    //  三次握手，之间两次能合并
    //  四次挥手，中间有两次合并不了（有时候是能合并）不能合并是因为发生的 ACK 和 FIN 的时机是不同的
    //  三次握手中：发生的 ACK 和 SYN 是同一时机发生的，就能够合并，此处的 B 给 A 发送的 ACK 和 SYN
    //   都是操作系统内核负责的，B 给 A 发的 FIN 是用户代码负责（B 的代码中调用了 socket.close()方法，才会触发
    //
}
